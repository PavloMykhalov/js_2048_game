{"mappings":"ACGA,IAAM,EAAQ,SAAS,gBAAgB,CAAC,eAClC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAe,SAAS,aAAa,CAAC,eACtC,EAAe,SAAS,aAAa,CAAC,0BACtC,EAAc,SAAS,aAAa,CAAC,yBACrC,EAAa,SAAS,aAAa,CAAC,wBAItC,EAAQ,EACR,EAAY,CACd,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CAeD,SAAS,IACP,IAAM,EAAa,MAAM,IAAI,CAAC,GAAO,MAAM,CAAC,SAAA,CAA5C,EAAoD,MAAA,AAAmB,KAAnB,EAAK,SAAS,A,GAElE,GAAI,AAAsB,IAAtB,EAAW,MAAM,EAIrB,IAAM,EACJ,CAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,CACrD,EAAW,EAAW,aAAa,CAAC,QAAQ,CAC5C,EAAc,EAAW,SAAS,AAEpC,AAAqC,CAAA,IAArC,CAAS,CAAC,EAAS,CAAC,EAAY,EAClC,CAAS,CAAC,EAAS,CAAC,EAAY,CAAG,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,EAC7D,EAAW,SAAS,CAAG,CAAS,CAAC,EAAS,CAAC,EAAY,CAAC,QAAQ,IAClB,IAArC,CAAS,CAAC,EAAS,CAAC,EAAY,EACzC,IAEJ,CAEA,SAAS,IACP,EAAU,OAAO,CAAC,SAAC,CAAA,CAAK,CAAxB,EACE,EAAI,OAAO,CAAC,SAAC,CAAA,CAAO,CAApB,EAEE,IAAM,EAAO,CAAK,CADJ,AAAW,EAAX,EAAe,EACJ,AAEzB,CAAA,EAAK,SAAS,CAAG,AAAU,IAAV,EAAc,GAAK,EAEpC,EAAK,SAAS,CAAG,AAAU,IAAV,EACb,aACC,0BAA+B,MAAA,CAAN,EAChC,EACF,GAEA,EAAa,SAAS,CAAG,CAC3B,CA8HA,SAAS,EAAW,CAAG,EAGrB,IAAK,IAFD,EAAS,EAAa,GAEjB,EAAI,EAAG,EAAI,EAAO,MAAM,CAAG,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EACb,CAAM,CAAC,EAAI,EAAE,CAAG,EAChB,GAAS,CAAM,CAAC,EAAE,EAMtB,IAFA,EAAS,EAAa,GAEf,EAAO,MAAM,CArMH,GAsMf,EAAO,IAAI,CAAC,GAGd,OAAO,CACT,CAEA,SAAS,EAAa,CAAG,EACvB,OAAO,EAAI,MAAM,CAAC,SAAA,CAAlB,EAA2B,OAAA,AAAU,IAAV,C,EAC7B,CAoCA,SAAS,EAAoB,CAAG,CAAE,CAAG,CAAE,CAAS,EAC9C,OAAQ,GACN,IAAK,KACH,OAAO,EAAM,GAAK,CAAS,CAAC,EAAI,CAAC,EAAI,GAAK,CAAS,CAAC,EAAM,EAAE,CAAC,EAAI,AACnE,KAAK,OACH,OAAO,EAAM,GACR,CAAS,CAAC,EAAI,CAAC,EAAI,GAAK,CAAS,CAAC,EAAM,EAAE,CAAC,EAAI,AACtD,KAAK,OACH,OAAO,EAAM,GAAK,CAAS,CAAC,EAAI,CAAC,EAAI,GAAK,CAAS,CAAC,EAAI,CAAC,EAAM,EAAE,AACnE,KAAK,QACH,OAAO,EAAM,GACR,CAAS,CAAC,EAAI,CAAC,EAAI,GAAK,CAAS,CAAC,EAAI,CAAC,EAAM,EAAE,AACtD,SACE,MAAO,CAAA,CACX,CACF,CAgBA,EAAY,gBAAgB,CAAC,QArN7B,WAjDE,EAAY,CACV,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CAED,EAAM,OAAO,CAAC,SAAA,CAAd,EACE,EAAK,SAAS,CAAG,EACnB,GA0CA,IACA,IACA,EAAQ,EACR,IACA,EAAY,SAAS,CAAC,MAAM,CAAC,SAC7B,EAAY,SAAS,CAAC,GAAG,CAAC,WAC1B,EAAY,SAAS,CAAG,UACxB,EAAa,SAAS,CAAC,GAAG,CAAC,UAC3B,EAAY,SAAS,CAAC,GAAG,CAAC,SAC5B,GA2MA,SAAS,gBAAgB,CAAC,UAAW,SAAC,CAAtC,EAA8C,OAAA,AArL9C,SAAwB,CAAG,EACzB,EAAI,cAAc,GAGhB,IAAM,EAAgB,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,IAC5C,EAAQ,CAAA,EAEZ,OAAQ,EAAI,GAAG,EACb,IAAK,UACH,AAiCR,CAAA,WACE,IAAK,IAAI,EAAW,EAAG,EAxIN,EAwI6B,IAAY,CAGxD,IAAK,IAFD,EAAS,EAAE,CAEN,EAAW,EAAG,EA3IR,EA2I+B,IAC5C,EAAO,IAAI,CAAC,CAAS,CAAC,EAAS,CAAC,EAAS,EAG3C,EAAS,EAAW,GAEpB,IAAK,IAAI,EAAW,EAAG,EAjJR,EAiJ+B,IAC5C,CAAS,CAAC,EAAS,CAAC,EAAS,CAAG,CAAM,CAAC,EAAS,AAEpD,CACF,CAAA,IA9CQ,KAEF,KAAK,YACH,AA6CR,CAAA,WACE,IAAK,IAAI,EAAW,EAAG,EAxJN,EAwJ6B,IAAY,CAGxD,IAAK,IAFD,EAAS,EAAE,CAEN,EAAW,EAAG,GAAY,EAAG,IACpC,EAAO,IAAI,CAAC,CAAS,CAAC,EAAS,CAAC,EAAS,EAG3C,EAAS,EAAW,GAEpB,IAAK,IAAI,EAAW,EAAG,GAAY,EAAG,IACpC,CAAS,CAAC,EAAS,CAAC,EAAS,CAAG,EAAO,KAAK,EAEhD,CACF,CAAA,IA1DQ,KAEF,KAAK,YA2DT,EAAU,OAAO,CAAC,SAAC,CAAA,CAAK,CAAxB,EACE,IAAM,EAAU,EAAW,EAE3B,CAAA,CAAS,CAAC,EAAS,CAAG,CACxB,GA7DM,KAEF,KAAK,aA+DT,EAAU,OAAO,CAAC,SAAC,CAAA,CAAK,CAAxB,EAEE,IAAM,EAAkB,EADJ,EAAI,KAAK,GAAG,OAAO,GAGvC,CAAA,CAAS,CAAC,EAAS,CAAG,EAAgB,KAAK,GAAG,OAAO,EACvD,EA9DE,CAEI,CAAC,AA0IT,SAAyB,CAAI,CAAE,CAAI,E,I,E,S,C,EAM/B,GAAI,CAAC,CAAI,CAAC,EAAE,CAAC,KAAK,CAAC,SAAC,CAAA,CAAK,CAAzB,EAAmC,OAAA,IAAQ,CAAI,CAAC,EAAE,CAAC,EAAM,AACvD,GAAA,MAAA,CAAO,EAAA,CAAA,CAAK,CAEhB,EARA,GAAI,EAAK,MAAM,GAAK,EAAK,MAAM,CAC7B,MAAO,CAAA,EAGT,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAE,IAAjC,C,I,E,E,G,G,A,U,C,A,G,A,a,O,Q,A,E,W,G,O,S,O,C,E,O,E,C,A,CAMA,MAAO,CAAA,CACT,EAtJyB,EAAe,IAClC,CAAA,EAAQ,CAAA,CADV,EAII,GACF,IAGF,IACA,AAnDJ,WACE,IAAK,IAAI,EAAM,EAAG,EAhFD,EAgFmB,IAClC,IAAK,IAAI,EAAM,EAAG,EAjFH,EAiFqB,IAClC,GAAI,AAAwB,OAAxB,CAAS,CAAC,EAAI,CAAC,EAAI,CAGrB,OAFA,EAAW,SAAS,CAAC,MAAM,CAAC,UAErB,CAAA,CAMf,IAjBO,AA4JP,WACE,IAAK,IAAI,EAAM,EAAG,EAvOD,EAuOmB,IAClC,IAAK,IAAI,EAAM,EAAG,EAxOH,EAwOqB,IAClC,GAAI,AAAwB,IAAxB,CAAS,CAAC,EAAI,CAAC,EAAI,CACrB,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,KAtKqB,AAsIrB,WACE,IAAK,IAAI,EAAM,EAAG,EAAM,EAAgB,IACtC,IAAK,IAAI,EAAM,EAAG,EAAM,EAAgB,IACtC,GAAI,CAAS,CAAC,EAAI,CAAC,EAAI,GAAK,CAAS,CAAC,EAAM,EAAE,CAAC,EAAI,EAC9C,CAAS,CAAC,EAAI,CAAC,EAAI,GAAK,CAAS,CAAC,EAAI,CAAC,EAAM,EAAE,EAKlD,EAAoB,EAAK,EAAK,OAC3B,EAAoB,EAAK,EAAK,SAC9B,EAAoB,EAAK,EAAK,SAC9B,EAAoB,EAAK,EAAK,SAPjC,MAAO,CAAA,EAcb,MAAO,CAAA,CACT,KAzJI,EAAY,SAAS,CAAC,MAAM,CAAC,SA0DjC,EA6I6D,E","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _type_of(obj) {\n    \"@swc/helpers - typeof\";\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\n// write your code here\nvar cells = document.querySelectorAll(\".field-cell\");\nvar startButton = document.querySelector(\".button.start\");\nvar scoreElement = document.querySelector(\".game-score\");\nvar messageStart = document.querySelector(\".message.message-start\");\nvar messageLose = document.querySelector(\".message.message-lose\");\nvar messageWin = document.querySelector(\".message.message-win\");\nvar BOARD_SIZE = 4;\nvar gameOver = false;\nvar score = 0;\nvar gameBoard = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nfunction clearBoard() {\n    gameBoard = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    cells.forEach(function(cell) {\n        cell.innerText = \"\";\n    });\n}\nfunction addRandomTile() {\n    var emptyCells = Array.from(cells).filter(function(cell) {\n        return cell.innerText === \"\";\n    });\n    if (emptyCells.length === 0) return;\n    var randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    var rowIndex = randomCell.parentElement.rowIndex;\n    var columnIndex = randomCell.cellIndex;\n    if (gameBoard[rowIndex][columnIndex] === 0) {\n        gameBoard[rowIndex][columnIndex] = Math.random() < 0.9 ? 2 : 4;\n        randomCell.innerText = gameBoard[rowIndex][columnIndex].toString();\n    } else if (gameBoard[rowIndex][columnIndex] !== 0) addRandomTile();\n}\nfunction updateBoard() {\n    gameBoard.forEach(function(row, rowIndex) {\n        row.forEach(function(value, columnIndex) {\n            var index = rowIndex * 4 + columnIndex;\n            var cell = cells[index];\n            cell.innerText = value === 0 ? \"\" : value;\n            cell.className = value === 0 ? \"field-cell\" : \"field-cell field-cell--\".concat(value);\n        });\n    });\n    scoreElement.innerText = score;\n}\nfunction startGame() {\n    clearBoard();\n    addRandomTile();\n    addRandomTile();\n    score = 0;\n    updateBoard();\n    startButton.classList.remove(\"start\");\n    startButton.classList.add(\"restart\");\n    startButton.innerText = \"Restart\";\n    messageStart.classList.add(\"hidden\");\n    messageLose.classList.add(\"hidden\");\n}\nfunction checkLose() {\n    if (!canMove() && !canMerged()) messageLose.classList.remove(\"hidden\");\n}\nfunction checkWin() {\n    for(var row = 0; row < BOARD_SIZE; row++){\n        for(var col = 0; col < BOARD_SIZE; col++)if (gameBoard[row][col] === 2048) {\n            messageWin.classList.remove(\"hidden\");\n            return true;\n        }\n    }\n    return false;\n}\nfunction handleKeyPress(evt) {\n    evt.preventDefault();\n    if (!gameOver) {\n        var originalBoard = JSON.parse(JSON.stringify(gameBoard));\n        var moved = false;\n        switch(evt.key){\n            case \"ArrowUp\":\n                moveTilesUp();\n                break;\n            case \"ArrowDown\":\n                moveTilesDown();\n                break;\n            case \"ArrowLeft\":\n                moveTilesLeft();\n                break;\n            case \"ArrowRight\":\n                moveTilesRight();\n                break;\n            default:\n                break;\n        }\n        if (!hasBoardChanged(originalBoard, gameBoard)) moved = true;\n        if (moved) addRandomTile();\n        updateBoard();\n        checkWin();\n        checkLose();\n    }\n}\nfunction moveTilesUp() {\n    for(var colIndex = 0; colIndex < BOARD_SIZE; colIndex++){\n        var column = [];\n        for(var rowIndex = 0; rowIndex < BOARD_SIZE; rowIndex++)column.push(gameBoard[rowIndex][colIndex]);\n        column = slideTiles(column);\n        for(var rowIndex1 = 0; rowIndex1 < BOARD_SIZE; rowIndex1++)gameBoard[rowIndex1][colIndex] = column[rowIndex1];\n    }\n}\nfunction moveTilesDown() {\n    for(var colIndex = 0; colIndex < BOARD_SIZE; colIndex++){\n        var column = [];\n        for(var rowIndex = 3; rowIndex >= 0; rowIndex--)column.push(gameBoard[rowIndex][colIndex]);\n        column = slideTiles(column);\n        for(var rowIndex1 = 3; rowIndex1 >= 0; rowIndex1--)gameBoard[rowIndex1][colIndex] = column.shift();\n    }\n}\nfunction moveTilesLeft() {\n    gameBoard.forEach(function(row, rowIndex) {\n        var slidRow = slideTiles(row);\n        gameBoard[rowIndex] = slidRow;\n    });\n}\nfunction moveTilesRight() {\n    gameBoard.forEach(function(row, rowIndex) {\n        var reversedRow = row.slice().reverse();\n        var slidReversedRow = slideTiles(reversedRow);\n        gameBoard[rowIndex] = slidReversedRow.slice().reverse();\n    });\n}\nfunction slideTiles(row) {\n    var result = removeZeroes(row);\n    for(var i = 0; i < result.length - 1; i++)if (result[i] === result[i + 1]) {\n        result[i] *= 2;\n        result[i + 1] = 0;\n        score += result[i];\n    }\n    result = removeZeroes(result);\n    while(result.length < BOARD_SIZE)result.push(0);\n    return result;\n}\nfunction removeZeroes(row) {\n    return row.filter(function(value) {\n        return value !== 0;\n    });\n}\nfunction canMerged() {\n    for(var row = 0; row < BOARD_SIZE - 1; row++)for(var col = 0; col < BOARD_SIZE - 1; col++){\n        if (gameBoard[row][col] === gameBoard[row + 1][col] || gameBoard[row][col] === gameBoard[row][col + 1]) return true;\n        if (canMergeInDirection(row, col, \"up\") || canMergeInDirection(row, col, \"down\") || canMergeInDirection(row, col, \"left\") || canMergeInDirection(row, col, \"right\")) return true;\n    }\n    return false;\n}\nfunction canMove() {\n    for(var row = 0; row < BOARD_SIZE; row++)for(var col = 0; col < BOARD_SIZE; col++){\n        if (gameBoard[row][col] === 0) return true;\n    }\n    return false;\n}\nfunction canMergeInDirection(row, col, direction) {\n    switch(direction){\n        case \"up\":\n            return row > 0 && gameBoard[row][col] === gameBoard[row - 1][col];\n        case \"down\":\n            return row < BOARD_SIZE - 1 && gameBoard[row][col] === gameBoard[row + 1][col];\n        case \"left\":\n            return col > 0 && gameBoard[row][col] === gameBoard[row][col - 1];\n        case \"right\":\n            return col < BOARD_SIZE - 1 && gameBoard[row][col] === gameBoard[row][col + 1];\n        default:\n            return false;\n    }\n}\nfunction hasBoardChanged(arr1, arr2) {\n    var _loop = function(i) {\n        if (!arr1[i].every(function(val, index) {\n            return val === arr2[i][index];\n        })) return {\n            v: false\n        };\n    };\n    if (arr1.length !== arr2.length) return false;\n    for(var i = 0; i < arr1.length; i++){\n        var _ret = _loop(i);\n        if (_type_of(_ret) === \"object\") return _ret.v;\n    }\n    return true;\n}\nstartButton.addEventListener(\"click\", startGame);\ndocument.addEventListener(\"keydown\", function(evt) {\n    return handleKeyPress(evt);\n});\n\n//# sourceMappingURL=index.2f392a65.js.map\n","'use strict';\n\n// write your code here\nconst cells = document.querySelectorAll('.field-cell');\nconst startButton = document.querySelector('.button.start');\nconst scoreElement = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message.message-start');\nconst messageLose = document.querySelector('.message.message-lose');\nconst messageWin = document.querySelector('.message.message-win');\n\nconst BOARD_SIZE = 4;\nconst gameOver = false;\nlet score = 0;\nlet gameBoard = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nfunction clearBoard() {\n  gameBoard = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  cells.forEach(cell => {\n    cell.innerText = '';\n  });\n}\n\nfunction addRandomTile() {\n  const emptyCells = Array.from(cells).filter(cell => cell.innerText === '');\n\n  if (emptyCells.length === 0) {\n    return;\n  }\n\n  const randomCell\n  = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n  const rowIndex = randomCell.parentElement.rowIndex;\n  const columnIndex = randomCell.cellIndex;\n\n  if (gameBoard[rowIndex][columnIndex] === 0) {\n    gameBoard[rowIndex][columnIndex] = Math.random() < 0.9 ? 2 : 4;\n    randomCell.innerText = gameBoard[rowIndex][columnIndex].toString();\n  } else if (gameBoard[rowIndex][columnIndex] !== 0) {\n    addRandomTile();\n  }\n}\n\nfunction updateBoard() {\n  gameBoard.forEach((row, rowIndex) => {\n    row.forEach((value, columnIndex) => {\n      const index = rowIndex * 4 + columnIndex;\n      const cell = cells[index];\n\n      cell.innerText = value === 0 ? '' : value;\n\n      cell.className = value === 0\n        ? 'field-cell'\n        : `field-cell field-cell--${value}`;\n    });\n  });\n\n  scoreElement.innerText = score;\n}\n\nfunction startGame() {\n  clearBoard();\n  addRandomTile();\n  addRandomTile();\n  score = 0;\n  updateBoard();\n  startButton.classList.remove('start');\n  startButton.classList.add('restart');\n  startButton.innerText = 'Restart';\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n}\n\nfunction checkLose() {\n  if (!canMove() && !canMerged()) {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nfunction checkWin() {\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      if (gameBoard[row][col] === 2048) {\n        messageWin.classList.remove('hidden');\n\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction handleKeyPress(evt) {\n  evt.preventDefault();\n\n  if (!gameOver) {\n    const originalBoard = JSON.parse(JSON.stringify(gameBoard));\n    let moved = false;\n\n    switch (evt.key) {\n      case 'ArrowUp':\n        moveTilesUp();\n        break;\n\n      case 'ArrowDown':\n        moveTilesDown();\n        break;\n\n      case 'ArrowLeft':\n        moveTilesLeft();\n        break;\n\n      case 'ArrowRight':\n        moveTilesRight();\n        break;\n\n      default:\n        break;\n    }\n\n    if (!hasBoardChanged(originalBoard, gameBoard)) {\n      moved = true;\n    }\n\n    if (moved) {\n      addRandomTile();\n    }\n\n    updateBoard();\n    checkWin();\n    checkLose();\n  }\n}\n\nfunction moveTilesUp() {\n  for (let colIndex = 0; colIndex < BOARD_SIZE; colIndex++) {\n    let column = [];\n\n    for (let rowIndex = 0; rowIndex < BOARD_SIZE; rowIndex++) {\n      column.push(gameBoard[rowIndex][colIndex]);\n    }\n\n    column = slideTiles(column);\n\n    for (let rowIndex = 0; rowIndex < BOARD_SIZE; rowIndex++) {\n      gameBoard[rowIndex][colIndex] = column[rowIndex];\n    }\n  }\n}\n\nfunction moveTilesDown() {\n  for (let colIndex = 0; colIndex < BOARD_SIZE; colIndex++) {\n    let column = [];\n\n    for (let rowIndex = 3; rowIndex >= 0; rowIndex--) {\n      column.push(gameBoard[rowIndex][colIndex]);\n    }\n\n    column = slideTiles(column);\n\n    for (let rowIndex = 3; rowIndex >= 0; rowIndex--) {\n      gameBoard[rowIndex][colIndex] = column.shift();\n    }\n  }\n}\n\nfunction moveTilesLeft() {\n  gameBoard.forEach((row, rowIndex) => {\n    const slidRow = slideTiles(row);\n\n    gameBoard[rowIndex] = slidRow;\n  });\n}\n\nfunction moveTilesRight() {\n  gameBoard.forEach((row, rowIndex) => {\n    const reversedRow = row.slice().reverse();\n    const slidReversedRow = slideTiles(reversedRow);\n\n    gameBoard[rowIndex] = slidReversedRow.slice().reverse();\n  });\n}\n\nfunction slideTiles(row) {\n  let result = removeZeroes(row);\n\n  for (let i = 0; i < result.length - 1; i++) {\n    if (result[i] === result[i + 1]) {\n      result[i] *= 2;\n      result[i + 1] = 0;\n      score += result[i];\n    }\n  }\n\n  result = removeZeroes(result);\n\n  while (result.length < BOARD_SIZE) {\n    result.push(0);\n  }\n\n  return result;\n}\n\nfunction removeZeroes(row) {\n  return row.filter(value => value !== 0);\n}\n\nfunction canMerged() {\n  for (let row = 0; row < BOARD_SIZE - 1; row++) {\n    for (let col = 0; col < BOARD_SIZE - 1; col++) {\n      if (gameBoard[row][col] === gameBoard[row + 1][col]\n        || gameBoard[row][col] === gameBoard[row][col + 1]) {\n        return true;\n      }\n\n      if (\n        canMergeInDirection(row, col, 'up')\n        || canMergeInDirection(row, col, 'down')\n        || canMergeInDirection(row, col, 'left')\n        || canMergeInDirection(row, col, 'right')\n      ) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction canMove() {\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      if (gameBoard[row][col] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction canMergeInDirection(row, col, direction) {\n  switch (direction) {\n    case 'up':\n      return row > 0 && gameBoard[row][col] === gameBoard[row - 1][col];\n    case 'down':\n      return row < BOARD_SIZE - 1\n        && gameBoard[row][col] === gameBoard[row + 1][col];\n    case 'left':\n      return col > 0 && gameBoard[row][col] === gameBoard[row][col - 1];\n    case 'right':\n      return col < BOARD_SIZE - 1\n        && gameBoard[row][col] === gameBoard[row][col + 1];\n    default:\n      return false;\n  }\n}\n\nfunction hasBoardChanged(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (!arr1[i].every((val, index) => val === arr2[i][index])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nstartButton.addEventListener('click', startGame);\ndocument.addEventListener('keydown', (evt) => handleKeyPress(evt));\n"],"names":["cells","document","querySelectorAll","startButton","querySelector","scoreElement","messageStart","messageLose","messageWin","score","gameBoard","addRandomTile","emptyCells","Array","from","filter","cell","innerText","length","randomCell","Math","floor","random","rowIndex","parentElement","columnIndex","cellIndex","toString","updateBoard","forEach","row","value","className","concat","slideTiles","result","removeZeroes","i","push","canMergeInDirection","col","direction","BOARD_SIZE","addEventListener","classList","remove","add","evt","handleKeyPress","preventDefault","originalBoard","JSON","parse","stringify","moved","key","moveTilesUp","colIndex","column","rowIndex1","moveTilesDown","shift","slidRow","slidReversedRow","slice","reverse","hasBoardChanged","arr1","arr2","_loop","every","val","index","v","_ret","_type_of","obj","Symbol","constructor","checkWin","canMove","canMerged"],"version":3,"file":"index.2f392a65.js.map"}